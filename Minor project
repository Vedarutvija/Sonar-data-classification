
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#open anaconda prompt and type the following commands for installing the required modules\n",
    "\n",
    "# Installing Keras\n",
    "# conda install -c conda-forge keras\n",
    "\n",
    "# Installing tensorflow\n",
    "# conda install -c conda-forge tensorflow\n",
    "\n",
    "# Installing matplotlib\n",
    "# conda install matplotlib \n",
    "\n",
    "# Installing sklearn\n",
    "# conda install -c anaconda scikit-learn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n",
      "C:\\Users\\dell\\anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:526: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint8 = np.dtype([(\"qint8\", np.int8, 1)])\n",
      "C:\\Users\\dell\\anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:527: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint8 = np.dtype([(\"quint8\", np.uint8, 1)])\n",
      "C:\\Users\\dell\\anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:528: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint16 = np.dtype([(\"qint16\", np.int16, 1)])\n",
      "C:\\Users\\dell\\anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:529: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_quint16 = np.dtype([(\"quint16\", np.uint16, 1)])\n",
      "C:\\Users\\dell\\anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:530: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  _np_qint32 = np.dtype([(\"qint32\", np.int32, 1)])\n",
      "C:\\Users\\dell\\anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\dtypes.py:535: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\n",
      "  np_resource = np.dtype([(\"resource\", np.ubyte, 1)])\n"
     ]
    }
   ],
   "source": [
    "import keras\n",
    "import tensorflow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mporting libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading Data\n",
    "dataset=pd.read_csv('sonar.csv', header = None)\n",
    "X=dataset.iloc[:, 0:60].values\n",
    "y=dataset.iloc[:, 60].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>51</th>\n",
       "      <th>52</th>\n",
       "      <th>53</th>\n",
       "      <th>54</th>\n",
       "      <th>55</th>\n",
       "      <th>56</th>\n",
       "      <th>57</th>\n",
       "      <th>58</th>\n",
       "      <th>59</th>\n",
       "      <th>60</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0200</td>\n",
       "      <td>0.0371</td>\n",
       "      <td>0.0428</td>\n",
       "      <td>0.0207</td>\n",
       "      <td>0.0954</td>\n",
       "      <td>0.0986</td>\n",
       "      <td>0.1539</td>\n",
       "      <td>0.1601</td>\n",
       "      <td>0.3109</td>\n",
       "      <td>0.2111</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0027</td>\n",
       "      <td>0.0065</td>\n",
       "      <td>0.0159</td>\n",
       "      <td>0.0072</td>\n",
       "      <td>0.0167</td>\n",
       "      <td>0.0180</td>\n",
       "      <td>0.0084</td>\n",
       "      <td>0.0090</td>\n",
       "      <td>0.0032</td>\n",
       "      <td>R</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0453</td>\n",
       "      <td>0.0523</td>\n",
       "      <td>0.0843</td>\n",
       "      <td>0.0689</td>\n",
       "      <td>0.1183</td>\n",
       "      <td>0.2583</td>\n",
       "      <td>0.2156</td>\n",
       "      <td>0.3481</td>\n",
       "      <td>0.3337</td>\n",
       "      <td>0.2872</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0084</td>\n",
       "      <td>0.0089</td>\n",
       "      <td>0.0048</td>\n",
       "      <td>0.0094</td>\n",
       "      <td>0.0191</td>\n",
       "      <td>0.0140</td>\n",
       "      <td>0.0049</td>\n",
       "      <td>0.0052</td>\n",
       "      <td>0.0044</td>\n",
       "      <td>R</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0262</td>\n",
       "      <td>0.0582</td>\n",
       "      <td>0.1099</td>\n",
       "      <td>0.1083</td>\n",
       "      <td>0.0974</td>\n",
       "      <td>0.2280</td>\n",
       "      <td>0.2431</td>\n",
       "      <td>0.3771</td>\n",
       "      <td>0.5598</td>\n",
       "      <td>0.6194</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0232</td>\n",
       "      <td>0.0166</td>\n",
       "      <td>0.0095</td>\n",
       "      <td>0.0180</td>\n",
       "      <td>0.0244</td>\n",
       "      <td>0.0316</td>\n",
       "      <td>0.0164</td>\n",
       "      <td>0.0095</td>\n",
       "      <td>0.0078</td>\n",
       "      <td>R</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0100</td>\n",
       "      <td>0.0171</td>\n",
       "      <td>0.0623</td>\n",
       "      <td>0.0205</td>\n",
       "      <td>0.0205</td>\n",
       "      <td>0.0368</td>\n",
       "      <td>0.1098</td>\n",
       "      <td>0.1276</td>\n",
       "      <td>0.0598</td>\n",
       "      <td>0.1264</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0121</td>\n",
       "      <td>0.0036</td>\n",
       "      <td>0.0150</td>\n",
       "      <td>0.0085</td>\n",
       "      <td>0.0073</td>\n",
       "      <td>0.0050</td>\n",
       "      <td>0.0044</td>\n",
       "      <td>0.0040</td>\n",
       "      <td>0.0117</td>\n",
       "      <td>R</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0762</td>\n",
       "      <td>0.0666</td>\n",
       "      <td>0.0481</td>\n",
       "      <td>0.0394</td>\n",
       "      <td>0.0590</td>\n",
       "      <td>0.0649</td>\n",
       "      <td>0.1209</td>\n",
       "      <td>0.2467</td>\n",
       "      <td>0.3564</td>\n",
       "      <td>0.4459</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0031</td>\n",
       "      <td>0.0054</td>\n",
       "      <td>0.0105</td>\n",
       "      <td>0.0110</td>\n",
       "      <td>0.0015</td>\n",
       "      <td>0.0072</td>\n",
       "      <td>0.0048</td>\n",
       "      <td>0.0107</td>\n",
       "      <td>0.0094</td>\n",
       "      <td>R</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 61 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       0       1       2       3       4       5       6       7       8   \\\n",
       "0  0.0200  0.0371  0.0428  0.0207  0.0954  0.0986  0.1539  0.1601  0.3109   \n",
       "1  0.0453  0.0523  0.0843  0.0689  0.1183  0.2583  0.2156  0.3481  0.3337   \n",
       "2  0.0262  0.0582  0.1099  0.1083  0.0974  0.2280  0.2431  0.3771  0.5598   \n",
       "3  0.0100  0.0171  0.0623  0.0205  0.0205  0.0368  0.1098  0.1276  0.0598   \n",
       "4  0.0762  0.0666  0.0481  0.0394  0.0590  0.0649  0.1209  0.2467  0.3564   \n",
       "\n",
       "       9   ...      51      52      53      54      55      56      57  \\\n",
       "0  0.2111  ...  0.0027  0.0065  0.0159  0.0072  0.0167  0.0180  0.0084   \n",
       "1  0.2872  ...  0.0084  0.0089  0.0048  0.0094  0.0191  0.0140  0.0049   \n",
       "2  0.6194  ...  0.0232  0.0166  0.0095  0.0180  0.0244  0.0316  0.0164   \n",
       "3  0.1264  ...  0.0121  0.0036  0.0150  0.0085  0.0073  0.0050  0.0044   \n",
       "4  0.4459  ...  0.0031  0.0054  0.0105  0.0110  0.0015  0.0072  0.0048   \n",
       "\n",
       "       58      59  60  \n",
       "0  0.0090  0.0032   R  \n",
       "1  0.0052  0.0044   R  \n",
       "2  0.0095  0.0078   R  \n",
       "3  0.0040  0.0117   R  \n",
       "4  0.0107  0.0094   R  \n",
       "\n",
       "[5 rows x 61 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Displaying top five rows of the given data\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>50</th>\n",
       "      <th>51</th>\n",
       "      <th>52</th>\n",
       "      <th>53</th>\n",
       "      <th>54</th>\n",
       "      <th>55</th>\n",
       "      <th>56</th>\n",
       "      <th>57</th>\n",
       "      <th>58</th>\n",
       "      <th>59</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>208.000000</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>208.000000</td>\n",
       "      <td>208.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.029164</td>\n",
       "      <td>0.038437</td>\n",
       "      <td>0.043832</td>\n",
       "      <td>0.053892</td>\n",
       "      <td>0.075202</td>\n",
       "      <td>0.104570</td>\n",
       "      <td>0.121747</td>\n",
       "      <td>0.134799</td>\n",
       "      <td>0.178003</td>\n",
       "      <td>0.208259</td>\n",
       "      <td>...</td>\n",
       "      <td>0.016069</td>\n",
       "      <td>0.013420</td>\n",
       "      <td>0.010709</td>\n",
       "      <td>0.010941</td>\n",
       "      <td>0.009290</td>\n",
       "      <td>0.008222</td>\n",
       "      <td>0.007820</td>\n",
       "      <td>0.007949</td>\n",
       "      <td>0.007941</td>\n",
       "      <td>0.006507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.022991</td>\n",
       "      <td>0.032960</td>\n",
       "      <td>0.038428</td>\n",
       "      <td>0.046528</td>\n",
       "      <td>0.055552</td>\n",
       "      <td>0.059105</td>\n",
       "      <td>0.061788</td>\n",
       "      <td>0.085152</td>\n",
       "      <td>0.118387</td>\n",
       "      <td>0.134416</td>\n",
       "      <td>...</td>\n",
       "      <td>0.012008</td>\n",
       "      <td>0.009634</td>\n",
       "      <td>0.007060</td>\n",
       "      <td>0.007301</td>\n",
       "      <td>0.007088</td>\n",
       "      <td>0.005736</td>\n",
       "      <td>0.005785</td>\n",
       "      <td>0.006470</td>\n",
       "      <td>0.006181</td>\n",
       "      <td>0.005031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.001500</td>\n",
       "      <td>0.000600</td>\n",
       "      <td>0.001500</td>\n",
       "      <td>0.005800</td>\n",
       "      <td>0.006700</td>\n",
       "      <td>0.010200</td>\n",
       "      <td>0.003300</td>\n",
       "      <td>0.005500</td>\n",
       "      <td>0.007500</td>\n",
       "      <td>0.011300</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000800</td>\n",
       "      <td>0.000500</td>\n",
       "      <td>0.001000</td>\n",
       "      <td>0.000600</td>\n",
       "      <td>0.000400</td>\n",
       "      <td>0.000300</td>\n",
       "      <td>0.000300</td>\n",
       "      <td>0.000100</td>\n",
       "      <td>0.000600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.013350</td>\n",
       "      <td>0.016450</td>\n",
       "      <td>0.018950</td>\n",
       "      <td>0.024375</td>\n",
       "      <td>0.038050</td>\n",
       "      <td>0.067025</td>\n",
       "      <td>0.080900</td>\n",
       "      <td>0.080425</td>\n",
       "      <td>0.097025</td>\n",
       "      <td>0.111275</td>\n",
       "      <td>...</td>\n",
       "      <td>0.008425</td>\n",
       "      <td>0.007275</td>\n",
       "      <td>0.005075</td>\n",
       "      <td>0.005375</td>\n",
       "      <td>0.004150</td>\n",
       "      <td>0.004400</td>\n",
       "      <td>0.003700</td>\n",
       "      <td>0.003600</td>\n",
       "      <td>0.003675</td>\n",
       "      <td>0.003100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.022800</td>\n",
       "      <td>0.030800</td>\n",
       "      <td>0.034300</td>\n",
       "      <td>0.044050</td>\n",
       "      <td>0.062500</td>\n",
       "      <td>0.092150</td>\n",
       "      <td>0.106950</td>\n",
       "      <td>0.112100</td>\n",
       "      <td>0.152250</td>\n",
       "      <td>0.182400</td>\n",
       "      <td>...</td>\n",
       "      <td>0.013900</td>\n",
       "      <td>0.011400</td>\n",
       "      <td>0.009550</td>\n",
       "      <td>0.009300</td>\n",
       "      <td>0.007500</td>\n",
       "      <td>0.006850</td>\n",
       "      <td>0.005950</td>\n",
       "      <td>0.005800</td>\n",
       "      <td>0.006400</td>\n",
       "      <td>0.005300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.035550</td>\n",
       "      <td>0.047950</td>\n",
       "      <td>0.057950</td>\n",
       "      <td>0.064500</td>\n",
       "      <td>0.100275</td>\n",
       "      <td>0.134125</td>\n",
       "      <td>0.154000</td>\n",
       "      <td>0.169600</td>\n",
       "      <td>0.233425</td>\n",
       "      <td>0.268700</td>\n",
       "      <td>...</td>\n",
       "      <td>0.020825</td>\n",
       "      <td>0.016725</td>\n",
       "      <td>0.014900</td>\n",
       "      <td>0.014500</td>\n",
       "      <td>0.012100</td>\n",
       "      <td>0.010575</td>\n",
       "      <td>0.010425</td>\n",
       "      <td>0.010350</td>\n",
       "      <td>0.010325</td>\n",
       "      <td>0.008525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>0.137100</td>\n",
       "      <td>0.233900</td>\n",
       "      <td>0.305900</td>\n",
       "      <td>0.426400</td>\n",
       "      <td>0.401000</td>\n",
       "      <td>0.382300</td>\n",
       "      <td>0.372900</td>\n",
       "      <td>0.459000</td>\n",
       "      <td>0.682800</td>\n",
       "      <td>0.710600</td>\n",
       "      <td>...</td>\n",
       "      <td>0.100400</td>\n",
       "      <td>0.070900</td>\n",
       "      <td>0.039000</td>\n",
       "      <td>0.035200</td>\n",
       "      <td>0.044700</td>\n",
       "      <td>0.039400</td>\n",
       "      <td>0.035500</td>\n",
       "      <td>0.044000</td>\n",
       "      <td>0.036400</td>\n",
       "      <td>0.043900</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 60 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               0           1           2           3           4           5   \\\n",
       "count  208.000000  208.000000  208.000000  208.000000  208.000000  208.000000   \n",
       "mean     0.029164    0.038437    0.043832    0.053892    0.075202    0.104570   \n",
       "std      0.022991    0.032960    0.038428    0.046528    0.055552    0.059105   \n",
       "min      0.001500    0.000600    0.001500    0.005800    0.006700    0.010200   \n",
       "25%      0.013350    0.016450    0.018950    0.024375    0.038050    0.067025   \n",
       "50%      0.022800    0.030800    0.034300    0.044050    0.062500    0.092150   \n",
       "75%      0.035550    0.047950    0.057950    0.064500    0.100275    0.134125   \n",
       "max      0.137100    0.233900    0.305900    0.426400    0.401000    0.382300   \n",
       "\n",
       "               6           7           8           9   ...          50  \\\n",
       "count  208.000000  208.000000  208.000000  208.000000  ...  208.000000   \n",
       "mean     0.121747    0.134799    0.178003    0.208259  ...    0.016069   \n",
       "std      0.061788    0.085152    0.118387    0.134416  ...    0.012008   \n",
       "min      0.003300    0.005500    0.007500    0.011300  ...    0.000000   \n",
       "25%      0.080900    0.080425    0.097025    0.111275  ...    0.008425   \n",
       "50%      0.106950    0.112100    0.152250    0.182400  ...    0.013900   \n",
       "75%      0.154000    0.169600    0.233425    0.268700  ...    0.020825   \n",
       "max      0.372900    0.459000    0.682800    0.710600  ...    0.100400   \n",
       "\n",
       "               51          52          53          54          55          56  \\\n",
       "count  208.000000  208.000000  208.000000  208.000000  208.000000  208.000000   \n",
       "mean     0.013420    0.010709    0.010941    0.009290    0.008222    0.007820   \n",
       "std      0.009634    0.007060    0.007301    0.007088    0.005736    0.005785   \n",
       "min      0.000800    0.000500    0.001000    0.000600    0.000400    0.000300   \n",
       "25%      0.007275    0.005075    0.005375    0.004150    0.004400    0.003700   \n",
       "50%      0.011400    0.009550    0.009300    0.007500    0.006850    0.005950   \n",
       "75%      0.016725    0.014900    0.014500    0.012100    0.010575    0.010425   \n",
       "max      0.070900    0.039000    0.035200    0.044700    0.039400    0.035500   \n",
       "\n",
       "               57          58          59  \n",
       "count  208.000000  208.000000  208.000000  \n",
       "mean     0.007949    0.007941    0.006507  \n",
       "std      0.006470    0.006181    0.005031  \n",
       "min      0.000300    0.000100    0.000600  \n",
       "25%      0.003600    0.003675    0.003100  \n",
       "50%      0.005800    0.006400    0.005300  \n",
       "75%      0.010350    0.010325    0.008525  \n",
       "max      0.044000    0.036400    0.043900  \n",
       "\n",
       "[8 rows x 60 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\n",
       "       'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\n",
       "       'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\n",
       "       'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\n",
       "       'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\n",
       "       'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\n",
       "       'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\n",
       "       'R', 'R', 'R', 'R', 'R', 'R', 'M', 'M', 'M', 'M', 'M', 'M', 'M',\n",
       "       'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M',\n",
       "       'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M',\n",
       "       'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M',\n",
       "       'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M',\n",
       "       'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M',\n",
       "       'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M',\n",
       "       'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M',\n",
       "       'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Feature Encoding to convert into binary digits\n",
    "# Rock=1, Mine=0\n",
    "from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n",
    "encoder = LabelEncoder()\n",
    "y = encoder.fit_transform(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Splitting into training and testing sets\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "156"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Feature Scaling\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "sc=StandardScaler()\n",
    "X_train=sc.fit_transform(X_train)\n",
    "X_test=sc.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Building ANN\n",
    "# Importing Keras Libraries and packages\n",
    "import keras \n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.layers import Dropout\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From C:\\Users\\dell\\anaconda3\\lib\\site-packages\\tensorflow\\python\\ops\\resource_variable_ops.py:435: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n"
     ]
    }
   ],
   "source": [
    "# Initializing ANN\n",
    "classifier = Sequential()\n",
    "\n",
    "# Building input and hidden layers with dropout\n",
    "classifier.add(Dense(units=32, activation='relu', kernel_initializer='uniform', input_dim=60))\n",
    "classifier.add(Dropout(rate = 0.1))\n",
    "\n",
    "# Adding second hidden layer\n",
    "classifier.add(Dense(units=32, activation='relu', kernel_initializer='uniform'))\n",
    "classifier.add(Dropout(rate = 0.1))\n",
    "\n",
    "# Adding output layer\n",
    "classifier.add(Dense(units=1, kernel_initializer='uniform', activation='sigmoid'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compiling ANN\n",
    "classifier.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From C:\\Users\\dell\\anaconda3\\lib\\site-packages\\tensorflow\\python\\ops\\math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n",
      "Epoch 1/100\n",
      "156/156 [==============================] - 0s 1ms/step - loss: 0.6913 - accuracy: 0.6090\n",
      "Epoch 2/100\n",
      "156/156 [==============================] - 0s 90us/step - loss: 0.6809 - accuracy: 0.7564\n",
      "Epoch 3/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.6461 - accuracy: 0.7821\n",
      "Epoch 4/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.5761 - accuracy: 0.8269\n",
      "Epoch 5/100\n",
      "156/156 [==============================] - 0s 90us/step - loss: 0.4795 - accuracy: 0.8205\n",
      "Epoch 6/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.3840 - accuracy: 0.8333\n",
      "Epoch 7/100\n",
      "156/156 [==============================] - 0s 122us/step - loss: 0.3284 - accuracy: 0.8526\n",
      "Epoch 8/100\n",
      "156/156 [==============================] - 0s 121us/step - loss: 0.2689 - accuracy: 0.8782\n",
      "Epoch 9/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.2408 - accuracy: 0.8782\n",
      "Epoch 10/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.2002 - accuracy: 0.9038\n",
      "Epoch 11/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.1833 - accuracy: 0.9295\n",
      "Epoch 12/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.1684 - accuracy: 0.9423\n",
      "Epoch 13/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.1472 - accuracy: 0.9679\n",
      "Epoch 14/100\n",
      "156/156 [==============================] - 0s 109us/step - loss: 0.1209 - accuracy: 0.9872\n",
      "Epoch 15/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.1045 - accuracy: 0.9872\n",
      "Epoch 16/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.0947 - accuracy: 0.9872\n",
      "Epoch 17/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.0800 - accuracy: 0.9808\n",
      "Epoch 18/100\n",
      "156/156 [==============================] - 0s 115us/step - loss: 0.0708 - accuracy: 0.9872\n",
      "Epoch 19/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0633 - accuracy: 0.9872\n",
      "Epoch 20/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.0531 - accuracy: 0.9872\n",
      "Epoch 21/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.0473 - accuracy: 0.9872\n",
      "Epoch 22/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0517 - accuracy: 0.9872\n",
      "Epoch 23/100\n",
      "156/156 [==============================] - 0s 89us/step - loss: 0.0267 - accuracy: 1.0000\n",
      "Epoch 24/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.0357 - accuracy: 0.9872\n",
      "Epoch 25/100\n",
      "156/156 [==============================] - 0s 128us/step - loss: 0.0287 - accuracy: 0.9936\n",
      "Epoch 26/100\n",
      "156/156 [==============================] - 0s 134us/step - loss: 0.0257 - accuracy: 0.9936\n",
      "Epoch 27/100\n",
      "156/156 [==============================] - 0s 109us/step - loss: 0.0228 - accuracy: 1.0000\n",
      "Epoch 28/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0213 - accuracy: 1.0000\n",
      "Epoch 29/100\n",
      "156/156 [==============================] - 0s 109us/step - loss: 0.0362 - accuracy: 0.9872\n",
      "Epoch 30/100\n",
      "156/156 [==============================] - 0s 109us/step - loss: 0.0189 - accuracy: 1.0000\n",
      "Epoch 31/100\n",
      "156/156 [==============================] - 0s 109us/step - loss: 0.0200 - accuracy: 1.0000\n",
      "Epoch 32/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0254 - accuracy: 0.9936\n",
      "Epoch 33/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0272 - accuracy: 0.9936\n",
      "Epoch 34/100\n",
      "156/156 [==============================] - 0s 153us/step - loss: 0.0095 - accuracy: 1.0000\n",
      "Epoch 35/100\n",
      "156/156 [==============================] - 0s 121us/step - loss: 0.0092 - accuracy: 1.0000\n",
      "Epoch 36/100\n",
      "156/156 [==============================] - 0s 121us/step - loss: 0.0124 - accuracy: 1.0000\n",
      "Epoch 37/100\n",
      "156/156 [==============================] - 0s 115us/step - loss: 0.0156 - accuracy: 0.9936\n",
      "Epoch 38/100\n",
      "156/156 [==============================] - 0s 109us/step - loss: 0.0127 - accuracy: 1.0000\n",
      "Epoch 39/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0166 - accuracy: 1.0000\n",
      "Epoch 40/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0110 - accuracy: 1.0000\n",
      "Epoch 41/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.0096 - accuracy: 1.0000\n",
      "Epoch 42/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.0075 - accuracy: 1.0000\n",
      "Epoch 43/100\n",
      "156/156 [==============================] - 0s 109us/step - loss: 0.0108 - accuracy: 1.0000\n",
      "Epoch 44/100\n",
      "156/156 [==============================] - 0s 115us/step - loss: 0.0115 - accuracy: 1.0000\n",
      "Epoch 45/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0099 - accuracy: 1.0000\n",
      "Epoch 46/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0072 - accuracy: 1.0000\n",
      "Epoch 47/100\n",
      "156/156 [==============================] - 0s 109us/step - loss: 0.0176 - accuracy: 1.0000\n",
      "Epoch 48/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.0068 - accuracy: 1.0000\n",
      "Epoch 49/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.0064 - accuracy: 1.0000\n",
      "Epoch 50/100\n",
      "156/156 [==============================] - 0s 115us/step - loss: 0.0091 - accuracy: 1.0000\n",
      "Epoch 51/100\n",
      "156/156 [==============================] - 0s 115us/step - loss: 0.0098 - accuracy: 0.9936\n",
      "Epoch 52/100\n",
      "156/156 [==============================] - 0s 109us/step - loss: 0.0051 - accuracy: 1.0000\n",
      "Epoch 53/100\n",
      "156/156 [==============================] - 0s 109us/step - loss: 0.0048 - accuracy: 1.0000\n",
      "Epoch 54/100\n",
      "156/156 [==============================] - 0s 141us/step - loss: 0.0072 - accuracy: 1.0000\n",
      "Epoch 55/100\n",
      "156/156 [==============================] - 0s 115us/step - loss: 0.0042 - accuracy: 1.0000\n",
      "Epoch 56/100\n",
      "156/156 [==============================] - 0s 128us/step - loss: 0.0049 - accuracy: 1.0000\n",
      "Epoch 57/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.0062 - accuracy: 1.0000\n",
      "Epoch 58/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0058 - accuracy: 1.0000\n",
      "Epoch 59/100\n",
      "156/156 [==============================] - 0s 90us/step - loss: 0.0060 - accuracy: 1.0000\n",
      "Epoch 60/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.0026 - accuracy: 1.0000\n",
      "Epoch 61/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0062 - accuracy: 1.0000\n",
      "Epoch 62/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.0035 - accuracy: 1.0000\n",
      "Epoch 63/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0079 - accuracy: 1.0000\n",
      "Epoch 64/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.0028 - accuracy: 1.0000\n",
      "Epoch 65/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0055 - accuracy: 1.0000\n",
      "Epoch 66/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.0145 - accuracy: 0.9936\n",
      "Epoch 67/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0067 - accuracy: 1.0000\n",
      "Epoch 68/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.0089 - accuracy: 1.0000\n",
      "Epoch 69/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.0018 - accuracy: 1.0000\n",
      "Epoch 70/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.0041 - accuracy: 1.0000\n",
      "Epoch 71/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.0058 - accuracy: 1.0000\n",
      "Epoch 72/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0056 - accuracy: 1.0000\n",
      "Epoch 73/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0021 - accuracy: 1.0000\n",
      "Epoch 74/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0048 - accuracy: 1.0000\n",
      "Epoch 75/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0072 - accuracy: 1.0000\n",
      "Epoch 76/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0063 - accuracy: 1.0000\n",
      "Epoch 77/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0034 - accuracy: 1.0000\n",
      "Epoch 78/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.0017 - accuracy: 1.0000\n",
      "Epoch 79/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0040 - accuracy: 1.0000\n",
      "Epoch 80/100\n",
      "156/156 [==============================] - 0s 90us/step - loss: 0.0056 - accuracy: 1.0000\n",
      "Epoch 81/100\n",
      "156/156 [==============================] - 0s 89us/step - loss: 0.0026 - accuracy: 1.0000\n",
      "Epoch 82/100\n",
      "156/156 [==============================] - 0s 90us/step - loss: 0.0057 - accuracy: 1.0000\n",
      "Epoch 83/100\n",
      "156/156 [==============================] - 0s 109us/step - loss: 0.0030 - accuracy: 1.0000\n",
      "Epoch 84/100\n",
      "156/156 [==============================] - 0s 115us/step - loss: 0.0042 - accuracy: 1.0000\n",
      "Epoch 85/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0041 - accuracy: 1.0000\n",
      "Epoch 86/100\n",
      "156/156 [==============================] - 0s 256us/step - loss: 0.0064 - accuracy: 1.0000\n",
      "Epoch 87/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.0010 - accuracy: 1.0000\n",
      "Epoch 88/100\n",
      "156/156 [==============================] - 0s 83us/step - loss: 0.0056 - accuracy: 1.0000\n",
      "Epoch 89/100\n",
      "156/156 [==============================] - 0s 83us/step - loss: 0.0042 - accuracy: 1.0000\n",
      "Epoch 90/100\n",
      "156/156 [==============================] - 0s 83us/step - loss: 0.0041 - accuracy: 1.0000\n",
      "Epoch 91/100\n",
      "156/156 [==============================] - 0s 83us/step - loss: 0.0016 - accuracy: 1.0000\n",
      "Epoch 92/100\n",
      "156/156 [==============================] - 0s 89us/step - loss: 0.0084 - accuracy: 1.0000\n",
      "Epoch 93/100\n",
      "156/156 [==============================] - 0s 89us/step - loss: 0.0060 - accuracy: 1.0000\n",
      "Epoch 94/100\n",
      "156/156 [==============================] - 0s 83us/step - loss: 0.0011 - accuracy: 1.0000\n",
      "Epoch 95/100\n",
      "156/156 [==============================] - 0s 96us/step - loss: 0.0011 - accuracy: 1.0000\n",
      "Epoch 96/100\n",
      "156/156 [==============================] - ETA: 0s - loss: 3.9364e-05 - accuracy: 1.00 - 0s 96us/step - loss: 0.0042 - accuracy: 1.0000\n",
      "Epoch 97/100\n",
      "156/156 [==============================] - 0s 89us/step - loss: 0.0014 - accuracy: 1.0000\n",
      "Epoch 98/100\n",
      "156/156 [==============================] - 0s 89us/step - loss: 0.0028 - accuracy: 1.0000\n",
      "Epoch 99/100\n",
      "156/156 [==============================] - 0s 102us/step - loss: 0.0023 - accuracy: 1.0000\n",
      "Epoch 100/100\n",
      "156/156 [==============================] - 0s 83us/step - loss: 0.0014 - accuracy: 1.0000\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.callbacks.History at 0x1d6543a3508>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fitting ANN to training set\n",
    "classifier.fit(X_train, y_train, batch_size = 10, epochs = 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predicting test set\n",
    "y_pred=classifier.predict(X_test) > 0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Evaluating using confusion matrix\n",
    "from sklearn.metrics import confusion_matrix,accuracy_score\n",
    "cm = confusion_matrix(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[26,  0],\n",
       "       [ 6, 20]], dtype=int64)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#confusion matrix\n",
    "cm\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "46"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Adding true positive and true negative values\n",
    "sum=26+20\n",
    "print(sum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8846153846153846"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Dividing the sum by total to find the testing accuracy\n",
    "sum/52"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
